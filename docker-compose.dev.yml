services:
  # Django Service

  api:
    build: .
    container_name: DjangoAPI
    command: >
      bash -c "python manage.py collectstatic --no-input &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5"
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - db
      - redis
    volumes:
      - .:/code
      - static_volume:/code/static/
      - media_volume:/code/media/
    env_file:
      - ./.env/.env.dev

  # PostgreSQL Database Service
  db:
    container_name: PostgreSQL
    image: postgres:16.2-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env/.env.dev

  # #nginx
  # nginx:
  #   image: nginx:1.25.4-alpine
  #   container_name: Nginx
  #   restart: unless-stopped
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - api
  #   volumes:
  #     - ./nginx/templates/nginx_dev.conf.template:/etc/nginx/templates
  #     - static_volume:/code/static/
  #     - media_volume:/code/media/
  #   env_file:
  #     - ./.env/.env.dev
  nginx:
    image: nginx:1.25.4-alpine
    container_name: Nginx
    restart: unless-stopped
    depends_on:
      - api
    # монтируем директорию nginx и сертификат с ключом
    volumes:
      - ./nginx/conf.d/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
      - ./nginx/cert.pem:/etc/cert.pem
      - ./nginx/key.pem:/etc/key.pem
      - static_volume:/code/static/
      - media_volume:/code/media/
    ports:
      - "80:80"
      - "443:443"

  certbot:
    ports:
      - "6000:80"
    env_file:
      - ./.env/.env.dev
    # и снова мониторуем директорию nginx
    volumes:
      - ./nginx/:/etc/nginx/
    build:
      context: ./certbot
      dockerfile: Dockerfile
      # задаем переменные среды
      args:
        EMAIL_HOST_USER: testdndwebsite@gmail.com
        DOMAIN: innkeeper.site

  # Celery Service
  celery:
    build: .
    container_name: Celery
    command: celery -A config worker --loglevel=info
    volumes:
        - .:/code
    env_file:
      - ./.env/.env.dev
    depends_on:
        - api
        - redis

  # Redis Service
  redis:
    container_name: Redis
    image: "redis:7.2-alpine"

volumes:
  # will be used to store our ssl certificate and make it persistent as wel   
  static_volume:
  media_volume:
  postgres_data:


