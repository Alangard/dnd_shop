services:
#   # Django Service

#   api:
#     build: .
#     container_name: DjangoAPI
#     command: >
#       bash -c "python manage.py collectstatic --no-input &&
#       python manage.py makemigrations &&
#       python manage.py migrate &&
#       gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5"
#     ports:
#       - 8000:8000
#     restart: always
#     depends_on:
#       - db
#       - redis
#     volumes:
#       - .:/code
#       - static_volume:/code/static/
#       - media_volume:/code/media/
#     env_file:
#       - ./.env/.env.prod

#   # PostgreSQL Database Service
#   db:
#     container_name: PostgreSQL
#     image: postgres:16.2-alpine
#     expose:
#       - 5432
#     restart: always
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     env_file:
#       - ./.env/.env.prod

#   #nginx
#   nginx:
#     image: nginx:1.25.4-alpine
#     container_name: Nginx
#     restart: unless-stopped
#     ports:
#       - 80:80
#       - 443:443
#     depends_on:
#       - api
#     volumes:
#       - ./nginx/conf_ssl.d:/etc/nginx/conf.d
#       # - ./nginx/templates/nginx_prod.conf.template:/etc/nginx/templates
#       - ./certbot/conf:/etc/letsencrypt
#       - ./certbot/www:/var/www/certbot
#       - static_volume:/code/static/
#       - media_volume:/code/media/
#     env_file:
#       - ./.env/.env.prod
#     command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

#   certbot:
#     image: certbot/certbot
#     restart: unless-stopped
#     volumes:
#       - ./certbot/conf:/etc/letsencrypt
#       - ./certbot/www:/var/www/certbot
#     env_file:
#       - ./.env/.env.prod
#     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

#   # Celery Service
#   celery:
#     build: .
#     container_name: Celery
#     command: celery -A config worker --loglevel=info
#     volumes:
#         - .:/code
#     env_file:
#       - ./.env/.env.prod
#     depends_on:
#         - api
#         - redis

#   # Redis Service
#   redis:
#     container_name: Redis
#     image: "redis:7.2-alpine"

# volumes:
#   # will be used to store our ssl certificate and make it persistent as wel   
#   static_volume:
#   media_volume:
#   postgres_data:


  # Django Service

  api:
    build: .
    container_name: DjangoAPI
    command: >
      bash -c "python manage.py collectstatic --no-input &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5"
    ports:
      - 8000:8000
    # networks: 
    #   - web
    restart: always
    depends_on:
      - db
      - redis
    volumes:
      - .:/code
      - static_volume:/code/static/
      - media_volume:/code/media/
    env_file:
      - ./.env/.env.prod

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ecom.middlewares=myredirect"
      - "traefik.http.middlewares.myredirect.redirectscheme.scheme=https"
      - "traefik.http.routers.ecom.rule=Host(`innkeeper.site`, `www.innkeeper.site`)"
      - "traefik.http.routers.ecom.entrypoints=web"        
      - "traefik.http.routers.ecom-secure.entrypoints=websecure"
      - "traefik.http.routers.ecom-secure.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.ecom-secure.tls=true"
    


  # PostgreSQL Database Service
  db:
    container_name: PostgreSQL
    image: postgres:16.2-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env/.env.prod

  traefik:
    image: traefik:v2.2
    restart: always
    container_name: "traefik"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--api.dashboard=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--entrypoints.metrics.address=:8081"
      - "--metrics.prometheus.entrypoint=metrics"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true"
      - "--certificatesresolvers.myhttpchallenge.acme.email=testdndwebsite@gmail.com"
      - "--certificatesresolvers.myhttpchallenge.acme.storage=acme.json"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /letsencrypt:/letsencrypt



  # #nginx
  # nginx:
  #   image: nginx:1.25.4-alpine
  #   container_name: Nginx
  #   restart: unless-stopped
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - api
  #   volumes:
  #     - ./nginx/conf_ssl.d:/etc/nginx/conf.d
  #     # - ./nginx/templates/nginx_prod.conf.template:/etc/nginx/templates
  #     - www-html:/var/www/html
  #     - etc-letsencrypt:/etc/letsencrypt
  #     - static_volume:/code/static/
  #     - media_volume:/code/media/
  #   env_file:
  #     - ./.env/.env.prod
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   depends_on: 
  #     - nginx
  #   restart: unless-stopped
  #   volumes:
  #     - www-html:/var/www/html
  #     - etc-letsencrypt:/etc/letsencrypt
  #   env_file:
  #     - ./.env/.env.prod
  #   command: certonly --webroot --webroot-path=/var/www/html --email testdndwebsite@gmail.com --agree-tos --no-eff-email -staging -d innkeeper.site

  # Celery Service
  celery:
    build: .
    container_name: Celery
    command: celery -A config worker --loglevel=info
    volumes:
        - .:/code
    env_file:
      - ./.env/.env.prod
    depends_on:
        - api
        - redis

  # Redis Service
  redis:
    container_name: Redis
    image: "redis:7.2-alpine"

volumes:
  # will be used to store our ssl certificate and make it persistent as wel   
  static_volume:
  media_volume:
  postgres_data:
  www-html:
  etc-letsencrypt:

networks:
  web:
   external: true

