services:
  api:
      build: .
      container_name: DjangoAPI
      command: >
        bash -c "python manage.py collectstatic --no-input &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5"
      # ports:
      #   - 8000:8000
      restart: always
      depends_on:
        - db
      volumes:
        - .:/code
        - static_volume:/code/static/
        - media_volume:/code/media/
      env_file:
        - ./.env/.env.prod

  # PostgreSQL Database Service
  db:
    container_name: PostgreSQL
    image: postgres:16.2-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env/.env.prod

  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot 
      - static_volume:/code/static/
      - media_volume:/code/media/
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    env_file:
      - ./.env/.env.prod


  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot 
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 5d & wait $${!}; done;'"
    env_file:
      - ./.env/.env.prod

  
volumes:
  # will be used to store our ssl certificate and make it persistent as wel   
  static_volume:
  media_volume:
  postgres_data:
