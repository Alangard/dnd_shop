services:
  # Django Service

  api:
    build: .
    container_name: DjangoAPI
    command: >
      bash -c "python manage.py collectstatic --no-input &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 200 --workers=5"
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - db
      - redis
    volumes:
      - .:/code
      - static_volume:/code/static/
      - media_volume:/code/media/
    environment:
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./.env

  # PostgreSQL Database Service
  db:
    container_name: PostgreSQL
    image: postgres:16.2-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./.env

  #nginx
  nginx:
    image: nginx:1.25.4-alpine
    container_name: Nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    depends_on:
      - api
      - db
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - static_volume:/code/static/
      - media_volume:/code/media/

    environment:
      - LETSENCRYPT_EMAIL=${EMAIL_HOST_USER}
      - LETSENCRYPT_DOMAIN=${DOMAIN}

  certbot:
    image: certbot/certbot
    depends_on:
      - nginx
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - LETSENCRYPT_EMAIL=${EMAIL_HOST_USER}
      - LETSENCRYPT_DOMAIN=${DOMAIN}
    command: certonly --webroot -w /var/www/certbot --keep-until-expiring --email testdndwebsite@gmail.com -d innkeeper.site --agree-tos
    
    # sets a trap for the TERM signal and starts a loop that executes the certbot renew command, 
    # then waits 12 hours (sleep 12h) before executing renew again. 
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Celery Service
  celery:
      build: .
      container_name: Celery
      command: celery -A config worker --loglevel=info
      volumes:
          - .:/code
      environment:
          - DEBUG=${DEBUG}
          - ALLOWED_HOSTS=${ALLOWED_HOSTS}
          - CELERY_BROKER_URL=${CELERY_BROKER_URL}
          - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      depends_on:
          - api
          - redis

  # Redis Service
  redis:
    container_name: Redis
    image: "redis:7.2-alpine"

volumes:
  # will be used to store our ssl certificate and make it persistent as wel   
  static_volume:
  media_volume:
  postgres_data:


